
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: dev_nb/02_fully_connected.ipynb

from exp.nb_01 import *

def x_to_tensor(listed):
    return tensor(list(map(array, listed)), dtype=torch.float32).reshape(len(listed), -1)

def y_to_tensor(listed):
    return tensor(array(listed))

def get_data():
    mnist = DataBlock(blocks=(ImageBlock(cls=PILImageBW), CategoryBlock),
                     get_items = get_image_files,
                     splitter = GrandparentSplitter('training', 'testing'),
                     get_y = parent_label)
    dls = mnist.dataloaders(untar_data(URLs.MNIST))

    x_train, y_train, x_valid, y_valid = [], [], [], []

    for elem in dls.train_ds:
        x_train.append(elem[0])
        y_train.append(elem[1])
    for elem in dls.valid_ds:
        x_valid.append(elem[0])
        y_valid.append(elem[1])

    return x_to_tensor(x_train), y_to_tensor(y_train), x_to_tensor(x_valid), y_to_tensor(y_valid)

def normalize(x, m, s): return (x-m)/s

def test_near_zero(a, tol=1e-3): assert a.abs() < tol, f'Not Near zero: {a}'

from torch.nn import init

def mse(output, target): return (output.squeeze(-1) - target).pow(2).mean()

from torch import nn